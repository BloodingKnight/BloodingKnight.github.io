<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Unlimited]]></title>
  <subtitle><![CDATA[Blog my life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://bloodingknight.github.io/"/>
  <updated>2014-03-16T14:37:34.684Z</updated>
  <id>http://bloodingknight.github.io/</id>
  
  <author>
    <name><![CDATA[胡勇刚]]></name>
    <email><![CDATA[unlimited@bupt.edu.cn]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[SQLSERVER数据库使用笔记]]></title>
    <link href="http://bloodingknight.github.io/2014/03/15/sqlserver-note/"/>
    <id>http://bloodingknight.github.io/2014/03/15/sqlserver-note/</id>
    <published>2014-03-15T01:27:26.000Z</published>
    <updated>2014-03-15T01:33:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">随机数生成</h2>
<pre><code>UPDATE CItemResult SET Result = cast(ceiling(rand(checksum(newid()))*N) as int)
</code></pre><p><a href="http://blog.sqlauthority.com/2007/04/29/sql-server-random-number-generator-script-sql-query/" target="_blank">http://blog.sqlauthority.com/2007/04/29/sql-server-random-number-generator-script-sql-query/</a><br><a href="http://hefan.iteye.com/blog/563840" target="_blank">http://hefan.iteye.com/blog/563840</a></p>
<h2 id="-">插入数据</h2>
<p><a href="http://technet.microsoft.com/zh-cn/library/ms188263%28v=sql.105%29.aspx" target="_blank">http://technet.microsoft.com/zh-cn/library/ms188263%28v=sql.105%29.aspx</a></p>
<h3 id="-">仅插入数据</h3>
<pre><code>DECLARE @I INT
DECLARE @J INT
SET @I = 2
WHILE @I &lt; 28
BEGIN
    INSERT INTO CItemResult (ID, TaskID, Auditor_ID, CellID, Applicability, Result)
        SELECT ID + (47 * (@I - 1)), @I, Auditor_ID, CellID, Applicability, floor(rand() * 10)
        FROM CItemResult C
        WHERE C.ID &lt; 48
    SET @I = @I + 1
END
GO
</code></pre><h3 id="-">新建表</h3>
<pre><code>SELECT column1, column2 INTO new_table_name FROM old_table_name
</code></pre><h2 id="-">数据转移</h2>
<p>有GUI界面可以使用</p>
<h3 id="-">复制数据库</h3>
<p>分离和备份都不适合。</p>
<ol>
<li>由原数据库创建create脚本。</li>
<li>创建一个新的数据库，将排序规则设置为Chinese_PRC_CS_AS，(后面会用到)</li>
<li>由create脚本将源数据库中的表在新数据库中重建</li>
<li>选择导入数据，将数据从原数据库中导入，如果数据库中的id是自增的标示符，则选中标示符插入。
这样数据库就备份好了。
如果</li>
<li>直接选择导入数据，则会发现新数据库中的表没有主外键，自增等关系</li>
<li>出现“id为只读属性”类似错误，或者“VS_ISBROKEN&quot;这种错误，则在相应的表复制时，选中标示符插入</li>
</ol>
<h2 id="-">附加数据库时，报错数据库只读的解决方案</h2>
<p><a href="http://blog.sina.com.cn/s/blog_3f2ef11801000bmy.html" target="_blank">http://blog.sina.com.cn/s/blog_3f2ef11801000bmy.html</a></p>
<ul>
<li>首先，修改mdf等文件的属性，取消“只读”属性</li>
<li>使用MSSQL配置管理工具，将服务的运行账户从“Network Service”修改为“Local System”</li>
</ul>
<p>我修改完之后就好了。</p>
]]></content>
    
    
      <category term="SQLSERVER" scheme="http://bloodingknight.github.io/tags/SQLSERVER/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小米刷机教程]]></title>
    <link href="http://bloodingknight.github.io/2014/03/14/xiaomi-shuaji/"/>
    <id>http://bloodingknight.github.io/2014/03/14/xiaomi-shuaji/</id>
    <published>2014-03-14T15:07:18.000Z</published>
    <updated>2014-03-15T01:22:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">准备工作</h2>
<p>对小米进行刷机可能需要准备的工具有：<br>MiFlash.exe，Android SDK Tools(adb, fastboot), 刷机包。</p>
<p>另外需要知道的一些知识有：</p>
<ol>
<li>如何进入Recovery模式：<ol>
<li>关机状态下同时按下电源键和音量“+”键，直到出现小米开机屏幕，松开按钮。</li>
<li>开机状态下，打开“系统升级”程序，按下“菜单键”，选择“重启到Recovery”即可。</li>
</ol>
</li>
<li>如何进入Fastboot模式：
关机状态下，同时按下电源键，音量”+“键和照相键即可（<strong>注意，进入Fastboot模式后，只能拔下电池来退出!</strong>)，此时不能<strong>连接</strong>电脑，否则无法进入。</li>
<li>使用adb连接手机：<ol>
<li>在手机上打开“开发者选项”</li>
<li>下载Android SDK Tools，并进入该文件夹</li>
<li>打开cmd窗口，输入<code>adb shell</code>
(Linux下，类似<code>./adb shell</code>)</li>
</ol>
</li>
</ol>
<h2 id="-">刷机类型</h2>
<p>小米有两种刷机类型：卡刷和线刷。<br>细分可以有如下几种：</p>
<ol>
<li>OTN升级，这个很简单，打开“系统升级”程序，然后自动升级即可</li>
<li>如果您长时间不更新，或者其他原因无法进行OTN升级，则可以使用卡刷， 
卡刷的方法就是，下载好<strong>卡刷包</strong>，然后有如下两种方式进行卡刷：<ol>
<li>开机状态下，打开”系统升级“程序，按下“菜单键”，选择“安装zip文件”，然后选择下载好的刷机包。</li>
<li>进入Recovery模式，选择安装zip文件（根据个人Recovery不同，会有不同的界面）。</li>
</ol>
</li>
<li>最后还有一种方式，就是线刷，线刷是比卡刷更为底层的刷机方式。<ul>
<li>下载MiFlash程序，线刷包（线刷包是一个exe后缀名的自解压程序，双击会自己解压缩）</li>
<li>打开MiFlash，选择线刷包</li>
<li>关闭手机，进入Fastboot模式，并连接电脑。</li>
<li>按刷新按钮，当出现了自己的device后，点击刷机按钮，成功！</li>
</ul>
</li>
</ol>
<h2 id="-">进阶篇</h2>
<p>上述的刷机方法对小米自己的刷机包没有任何问题，但是如果想刷入4.4的系统，则会失败！原因是小米手机采用了双系统分区的方式，每个系统分区都只有210MB左右，这在Android2.3时代是够用的，但是Android4.4时代则完全不够用（自己刷入gapp的童鞋应该有过体会）。因此再刷机之前我们需要先重新分区。</p>
<h3 id="-">分区</h3>
<p>关于分区，网上有很多<a href="http://www.miui.com/thread-957530-1-1.html" target="_blank">资料</a>，还有一个很不错的excel表格，用来<a href="http://pan.baidu.com/share/link?shareid=441785&amp;uk=2114739149" target="_blank">计算分区大小</a>。<br><strong>注意！！</strong> 想要分区的同志一定要记住，如果自己的手机是MIUI V5的系统，需要先刷回V4的系统，否则在关机状态下，使用adb连接手机会出现下面的错误：</p>
<blockquote>
<p>adb authenntication</p>
</blockquote>
<p>大致意思是，你需要在由于身份验证问题，你需要再屏幕上点击确定来继续调试，我想知道，我再关机的情况下，哪来的对话框啊！！！</p>
<ol>
<li>关机，使用adb连接手机，并进入shell（见上）</li>
<li>如果你打开的shell窗口不是root身份（提示符是“$”， 而不是“#”则说明不是root身份），输入<code>su</code>进入root身份</li>
<li>输入<code>fdisk /dev/block/mmcblk0</code>，如果提示没有fdisk程序，则开机安装busybox程序，然后重复上述步骤，并输入<code>busybox fdisk /dev/block/mmcblk0</code></li>
<li>使用<code>d</code>删除分区，<code>n</code>新建分区，记得自己计算好分区大小，另外，<strong>分区数目必须一致！</strong>有一个excel表格可以用来计算分区大小。<br>删除15-20号分区，然后新建，分区大小随自己喜欢，但是第17号分区一般都会分配10M的大小。另外，下一个分区的起始位置应该等于上一个分区结束位置+2。</li>
<li>使用<code>t</code>来修改第17号分区的类型，修改为60。</li>
<li>检查一下自己的分区表，输入<code>w</code>保存。</li>
</ol>
<p>分区成功！</p>
<h3 id="-recovery">线刷Recovery</h3>
<p>分区完成后，只有第一个system分区的内容未变，因此我们需要重新刷入Recovery，方法如下：<br>进入Fastboot模式，输入<code>fastboot flash recovery /path/to/your/recovery/img</code>即可</p>
<h3 id="-">安装新系统</h3>
<p>进入Recovery模式，三清后，直接安装zip文件即可。<br><strong>注意！一定要三清，否则系统的安装会有一些，奇怪的错误，我的错误是无法使用Home键，还有一系列奇怪的错误。</strong><br>P.S. 有人说可以线刷，但是我一直失败。
P.S. 如果想要线刷，请打开flash_all.bat文件，删除含有&quot;system1&quot;和&quot;boot1&quot;的行，然后再刷。</p>
<h3 id="-">补救措施</h3>
<p>如果手机刷机失败了，成砖了，怎么办？没问题，只要可以进入Fastboot模式，<a href="http://www.miui.com/thread-1017815-1-1.html" target="_blank">依旧可以救回来！！！</a></p>
<p>进入Fastboot模式，输入<code>fastboot boot /path/to/your/recovery/img</code>，这个时候会进入Recovery模式，然后连接电脑，使用adb连接手机，进入shell查看自己的分区表是否正常，大部分的错误都在这上面。</p>
<p>如果……你像我一样，在V5的系统上面，开机状态下直接残暴的分区，你会发现分区变了，但是系统没有变化……但是无法线刷，会报如下错误：</p>
<blockquote>
<p>remote: size too large</p>
</blockquote>
<p>你可以：<br>下载一个V4的线刷包，找到system.img文件<br>进入Fastboot模式，<code>fastboot flash system /path/to/your/system/img</code>，如果不满意，可以顺便把recovery也flash一下。然后就进入了V4系统。</p>
<h3 id="-">参考资料</h3>
<p>感谢网上的许多资料，特别是MIUI论坛上的人。<br>分区方法： <a href="http://www.miui.com/thread-957530-1-1.html" target="_blank">http://www.miui.com/thread-957530-1-1.html</a>]<br>分区表格： <a href="http://pan.baidu.com/share/link?shareid=441785&amp;uk=2114739149" target="_blank">http://pan.baidu.com/share/link?shareid=441785&amp;uk=2114739149</a><br>刷机失败，恢复方法： <a href="http://www.miui.com/thread-1017815-1-1.html" target="_blank">http://www.miui.com/thread-1017815-1-1.html</a></p>
]]></content>
    
    
      <category term="Android" scheme="http://bloodingknight.github.io/tags/Android/"/>
    
      <category term="小米" scheme="http://bloodingknight.github.io/tags/%E5%B0%8F%E7%B1%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OBIEE 使用小记]]></title>
    <link href="http://bloodingknight.github.io/2014/03/14/obiee-guide/"/>
    <id>http://bloodingknight.github.io/2014/03/14/obiee-guide/</id>
    <published>2014-03-14T07:42:09.000Z</published>
    <updated>2014-03-15T01:35:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">安装</h2>
<p>首先去官方网站下载rcu，和obiee<br>rcu：
obiee：</p>
<h3 id="-">复制数据库</h3>
<p>分离和备份都不适合。</p>
<ol>
<li>由原数据库创建create脚本。</li>
<li>创建一个新的数据库，将排序规则设置为Chinese_PRC_CS_AS，(后面会用到)</li>
<li>由create脚本将源数据库中的表在新数据库中重建</li>
<li>选择导入数据，将数据从原数据库中导入，如果数据库中的id是自增的标示符，则选中标示符插入。
这样数据库就备份好了。
如果</li>
<li>直接选择导入数据，则会发现新数据库中的表没有主外键，自增等关系</li>
<li>出现“id为只读属性”类似错误，或者“VS_ISBROKEN&quot;这种错误，则在相应的表复制时，选中标示符插入</li>
</ol>
<h3 id="-rcu">安装rcu</h3>
<p>下载好rcu后，解压，运行BIN目录下的rcu.bat文件，一路点过去。
如果出现错误，按照提示在ssms中运行相应的sql语句，注意，这几个语句需要占有排它锁，建议关闭其他链接后运行</p>
<h3 id="-obiee">安装obiee</h3>
<p>运行DISK1/setup.exe
一路点过去，
如果出现“返回的是ip而不是域名”类似的错误，则想Windows/system32/drivers/etc/hosts文件内，添加一行，对应自己的ip和自己想填写的域名。</p>
<p>安装出错！！！
到第14步时，进程走到了18%就不动了，然后说设置数据库连接错误！！！
卸载失败！！！
记得备份注册表。最好有一个虚拟机……</p>
<h2 id="-">分析-公司不同时期分数对比</h2>
<p>使用线图</p>
<pre><code>Entity &lt;--- Department &lt;--- CItemResult ---&gt; AuditTask
</code></pre><p>统计各公司在不同AuditTask的情况下的总得分，并且用线图表示。
那么就使用数据钻取功能，建立一个新的维度。</p>
<h3 id="2013-">2013年第一次尝试</h3>
<ol>
<li><p>第一次尝试：<br>按照<a href="http://www.cnblogs.com/yjmyzz/archive/2012/11/30/2787952.html" target="_blank">博客</a>中的例子进行，在业务模型区域，新建逻辑维test，并且将CItemResult, Department, CustEntity三张表的id，按照父子级别放入test之中，然后拖入表示区域，并将test维放在CustEntity_Dept下面。结果除了如下的错误。</p>
<blockquote>
<p>ERRORS:<br>业务模型 CPSecSMS:<br>[nQSError: 15003] 维表 [CustEntity,Department] 缺少最详细表。<br>[nQSError: 15001] 无法加载主题区域 CPSecSMS 的导航空间。</p>
</blockquote>
</li>
<li><p>第二次尝试：<br> 将test维度中的dept, entity对象改为CustEntity_Dept中的各个id，仍然出错：</p>
<blockquote>
<p>ERRORS:<br>业务模型 CPSecSMS:<br>[nQSError: 15034] 维 test 不与任何维表相关联。<br>[nQSError: 15001] 无法加载主题区域 CPSecSMS 的导航空间。</p>
</blockquote>
</li>
<li><p>第三次尝试：<br> 将test维度中的entity对象改为CustEntity中的id，dept对象是CustEntity_Dept中的id，保存成功。但是依旧无法钻取，Entity，Department，Result同时出现的时候就会出错。</p>
</li>
<li><p>第四次尝试：<br> 新建一个视图，将CustEntity, Department, CItemResult三张表的关系放在一起，并根据这三个id建立逻辑维BI_EDR，出错：</p>
<blockquote>
<p>ERRORS:<br>业务模型 CPSecSMS:<br>[38133] 逻辑表 &#39;&quot;CPSecSMS&quot;.&quot;Entity_Dept_Result&quot;&#39; 未与任何其他逻辑表联接。</p>
</blockquote>
<p> 猜测可能需要新建一张表，而不是建立一个视图。</p>
</li>
<li><p>第五次尝试：
 手动在业务模型区域为上次尝试中的视图添加外键关系，出错：</p>
<blockquote>
<p>ERRORS:<br>业务模型 CPSecSMS:<br>[nQSError: 15034] 维 BI_EDR 不与任何维表相关联。<br>[nQSError: 15001] 无法加载主题区域 CPSecSMS 的导航空间。</p>
</blockquote>
</li>
<li><p>按照地2，3次尝试的方法，将BI_EDR中的entity层替换为CustEntity，保存成功。</p>
</li>
<li><p>完成所有操作！！</p>
</li>
<li><p>数据无法正常更新！！！————打开BI管理，对物理对象“更新行计数”，然后在管理中更新文件和元数据，然后刷新数据即可。</p>
</li>
</ol>
<h3 id="2014-">2014年第一次尝试</h3>
<p>同样适用上述场景</p>
<ol>
<li><p>在“业务模型和映射”区域新建“基于级别的逻辑维”，然后新建“Entity”和“Dept”两个对象，并将表“CustEntity_Dept”中的entity和dept字段放入其中，但是为ItemResult的Grade字段添加聚合副本SUM是失败：</p>
<blockquote>
<p>ERRORS:</p>
<p>业务模型 CPSecSMS:<br>[38028] 逻辑列 ItemResult.SUM 的数据类型无效。</p>
</blockquote>
</li>
<li><p>将ItemResult的SUM字段的聚合规则中取消“基于维”的，出现新的错误</p>
<blockquote>
<p>ERRORS:</p>
<p>业务模型 CPSecSMS:<br>[nQSError: 23001] 聚合规则SUM.度量.AggRule_2050:6631394507760 的聚合表达式无效。<br>[nQSError: 23013] 提取属性 &#39;&quot;CPSecSMS&quot;.&quot;ItemResult&quot;.&quot;SUM&quot;&#39; 的元数据定义时出错。<br>[nQSError: 15001] 无法加载主题区域 CPSecSMS 的导航空间。  </p>
</blockquote>
</li>
<li><p><del>忽视这个问题！可以正常运行！</del></p>
</li>
<li><p><del>删除所有数据，并在物理层导入完全的数据库，而不是数据库中单独的几张表，成功！！</del></p>
</li>
<li><p>将逻辑列ItemResult.SUM改名为ResultSUM，成功！！！应该是命名冲突问题</p>
</li>
</ol>
]]></content>
    
    
      <category term="obiee" scheme="http://bloodingknight.github.io/tags/obiee/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[求一个函数的最小值]]></title>
    <link href="http://bloodingknight.github.io/2014/03/05/min-value-function/"/>
    <id>http://bloodingknight.github.io/2014/03/05/min-value-function/</id>
    <published>2014-03-05T03:30:16.000Z</published>
    <updated>2014-03-05T03:43:25.000Z</updated>
    <content type="html"><![CDATA[<p>在机器学习中经常需要使用到求函数的最小值，一般而言有如下几种方法：梯度下降法（Gradient Decent)，牛顿法，Fisher-得分法。
<a id="more"></a></p>
<h2 id="-">梯度下降法</h2>
<h2 id="-">牛顿法</h2>
<h2 id="fisher-">Fisher-得分法</h2>
]]></content>
    <summary type="html"><![CDATA[<p>在机器学习中经常需要使用到求函数的最小值，一般而言有如下几种方法：梯度下降法（Gradient Decent)，牛顿法，Fisher-得分法。
]]></summary>
    
      <category term="machine learning" scheme="http://bloodingknight.github.io/tags/machine%20learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分类（Classification）和回归（Regression）]]></title>
    <link href="http://bloodingknight.github.io/2014/03/05/classification-regression/"/>
    <id>http://bloodingknight.github.io/2014/03/05/classification-regression/</id>
    <published>2014-03-05T02:39:21.000Z</published>
    <updated>2014-03-05T03:26:05.000Z</updated>
    <content type="html"><![CDATA[<p>在看Coursera上机器学习的教学视频的时候，学到了两个词：Classfication和Regression。他们是机器学习中常用的两个方法，或者说是需要解决的两类问题。
<a id="more"></a></p>
<h2 id="classfication">Classfication</h2>
<p>Classfication比较好理解，就是分类。对于一个问题我们有固定的几种输出就是分类。
例如，我们要想预测明天的天气情况：下雪，下雨，阴天，多云还是晴天。
可以看到Classification的输出是离散的变量</p>
<h2 id="regression">Regression</h2>
<p>Regression是回归，和分类不同，对于一个问题，他的输出是不固定的，意即输出的是连续的变量。
例如，我们要想预测公司的营业额。</p>
]]></content>
    <summary type="html"><![CDATA[<p>在看Coursera上机器学习的教学视频的时候，学到了两个词：Classfication和Regression。他们是机器学习中常用的两个方法，或者说是需要解决的两类问题。
]]></summary>
    
      <category term="machine learning" scheme="http://bloodingknight.github.io/tags/machine%20learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[机器学习笔记（一）]]></title>
    <link href="http://bloodingknight.github.io/2014/02/10/machine-learning-1/"/>
    <id>http://bloodingknight.github.io/2014/02/10/machine-learning-1/</id>
    <published>2014-02-10T08:19:05.000Z</published>
    <updated>2014-03-05T03:34:11.000Z</updated>
    <content type="html"><![CDATA[<p>最近看了Coursera上面Machine Learning的课程，在此留下笔记。</p>
<p>另：github上有一个coursera-dl的程序可以用来下载coursera的视频非常好用！</p>
<p>又另：coursera-dl只能在linux下使用！
<a id="more"></a></p>
<h2 id="-">机器学习的用途</h2>
<p>机器学习在生活中有许多用途，常见的有垃圾邮件的拦截，数据挖掘，电脑AI等。</p>
<h2 id="-">机器学习的定义</h2>
<ul>
<li><p>Arthur Samuel (1959): </p>
<blockquote>
<p>Field of study that gives computers the ability to learn without being explicitly programmed.</p>
</blockquote>
<p>他曾经设计了一个Check Game的AI，虽然他本人并不精通这个游戏，但是当AI与AI自己下了许多盘棋之后，AI自己学会了这个游戏，并比作者本人还要玩得好。在这里面由于作者不精通游戏，因此无法显式地将编写出下棋程序，AI必须通过自己学习来学会下棋，这就是机器学习。</p>
</li>
<li><p>Tom Mitchell (1998) Well-posed Learning Problem: </p>
<blockquote>
<p>A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p>
</blockquote>
<p>意即对于一个程序，它拥有学习经验E，并处理任务T，使用P来描述程序的表现，如果在处理T时，通过对E进行学习，可以提升他的表现P，那么这就是一个机器学习的程序。
对于一个垃圾邮件拦截程序而言：</p>
<ul>
<li>拦截垃圾邮件 -- 任务T</li>
<li>用户自己标记垃圾邮件 -- 经验E</li>
<li>垃圾邮件拦截的正确率 -- 表现P</li>
</ul>
</li>
</ul>
<h2 id="-">机器学习的分类</h2>
<p>一般而言，我们可以将机器学习分为两类有监督和无监督。</p>
<ul>
<li>有监督（Supervised): 有监督即有人工给出所需的经验，比如在垃圾邮件拦截中，用户自己标记垃圾邮件就属于有监督；在分词程序中，用户提供已经分好词的词库就属于有监督。</li>
<li>无监督 (Unsupervised): 无监督即指没有人工给出所需的经验，一切都有程序自行来判断。</li>
</ul>
<p>在功能上，有监督属于<strong>分类</strong>，而无监督属于<strong>聚类</strong>。
另外还有 Reinfocement learning, recommener system等等。</p>
]]></content>
    <summary type="html"><![CDATA[<p>最近看了Coursera上面Machine Learning的课程，在此留下笔记。</p>
<p>另：github上有一个coursera-dl的程序可以用来下载coursera的视频非常好用！</p>
<p>又另：coursera-dl只能在linux下使用！
]]></summary>
    
      <category term="machine learning" scheme="http://bloodingknight.github.io/tags/machine%20learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pratical Common Lisp 读书笔记 (第三章)]]></title>
    <link href="http://bloodingknight.github.io/2013/10/29/pratical-common-lisp-note-chapter-3/"/>
    <id>http://bloodingknight.github.io/2013/10/29/pratical-common-lisp-note-chapter-3/</id>
    <published>2013-10-29T03:05:25.000Z</published>
    <updated>2013-10-29T08:05:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">第三章</h2>
<h3 id="-">基础函数</h3>
<p><code>defvar</code> <code>defun</code> 有不同的作用，定义变量和函数
<code>list</code> 可以用来构建一个列表
<code>getf</code> 可以用来取出列表中的值
<code>setf</code> 可以用来设置列表或者其他元素的值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">;;; 定义一个列表，元素是1 2 3</span>
<span class="list">(<span class="title">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>
<span class="comment">;;; 定义一个列表，元素是a b c</span>
<span class="comment">;;; 在lisp中任何字符串如果直接出现都会被lisp求值，在字符串前面放置'，可以使用他的字面值</span>
<span class="list">(<span class="title">list</span> 'a 'b 'c)</span>
<span class="comment">;;; 定义一个列表，列表的值是键值对</span>
<span class="list">(<span class="title">list</span> <span class="keyword">:a</span> <span class="number">1</span> <span class="keyword">:b</span> <span class="number">2</span> <span class="keyword">:c</span> <span class="number">3</span>)</span>
<span class="comment">;;; 取出列表的值</span>
<span class="list">(<span class="title">getf</span> <span class="list">(<span class="title">list</span> <span class="keyword">:a</span> <span class="number">1</span> <span class="keyword">:b</span> <span class="number">2</span> <span class="keyword">:c</span> <span class="number">3</span>)</span> <span class="keyword">:a</span>)</span> <span class="comment">; 1</span>
<span class="comment">;;; 实际上，list会自动将自己的值，每两个分为一对</span>
<span class="list">(<span class="title">getf</span> <span class="list">(<span class="title">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span> <span class="number">1</span>)</span> <span class="comment">;2</span>
<span class="list">(<span class="title">getf</span> <span class="list">(<span class="title">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span> <span class="number">2</span>)</span> <span class="comment">;NIL</span>
<span class="comment">;;; 定义一个变量</span>
<span class="list">(<span class="title">defvar</span> str <span class="string">"hello"</span>)</span>
<span class="list">(<span class="title">defvar</span> aList <span class="list">(<span class="title">list</span> <span class="keyword">:a</span> <span class="number">1</span> <span class="keyword">:b</span> <span class="number">2</span> <span class="keyword">:c</span> <span class="number">3</span>)</span>)</span>
<span class="comment">;;; 修改变量的值</span>
<span class="list">(<span class="title">setf</span> str <span class="string">"hello, world"</span>)</span> <span class="comment">;对已经定义过的变量重新使用defvar定义不会修改他的值</span>
<span class="list">(<span class="title">setf</span> <span class="list">(<span class="title">getf</span> aList <span class="keyword">:a</span>)</span> <span class="number">2</span>)</span>
<span class="comment">;;; 定义一个函数</span>
<span class="list">(<span class="title">defun</span> myfun <span class="list">(<span class="title">args</span>)</span>
  <span class="list">(<span class="title">format</span> <span class="literal">t</span> args)</span>
)</span>
<span class="list">(<span class="title">myfun</span> str)</span>
</pre></td></tr></table></figure>

<h3 id="-">输入与输出</h3>
<p><code>format</code> 函数可用于输出
<code>read-line</code> 读取一行字符
<code>t</code> 代表控制台
<code>*query-io*</code> 代表默认io</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="list">(<span class="title">format</span> <span class="literal">t</span> <span class="string">"hello, world"</span>)</span>
<span class="list">(<span class="title">read-line</span> <span class="variable">*query-io*</span>)</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="lisp" scheme="http://bloodingknight.github.io/tags/lisp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery使用笔记]]></title>
    <link href="http://bloodingknight.github.io/2013/10/21/jquery-note/"/>
    <id>http://bloodingknight.github.io/2013/10/21/jquery-note/</id>
    <published>2013-10-21T15:55:34.000Z</published>
    <updated>2014-03-05T13:27:33.000Z</updated>
    <content type="html"><![CDATA[<p>jQuery 是世界上使用的最多的一个javascript库之一，它最初提出来的目的是为了解决不同浏览器之间的兼容性问题。而现在，jQuery强大的dom，css操作能力，已经在很大程度上代替了原本的dom操作。</p>
<p>jQuery最主要的方法是jQuery或者是$，$是jQuery的一个别名，当你使用了prototype等库的时候，为了避免命名冲突，可以使用jQuery来运行。甚至可以使用jQuery.conflict()方法给jQuery再取一个别名。</p>
<h2 id="jquery-">jQuery选择器</h2>
<p>jQuery可以使用css selector的方式取得dom控件，并将其扩展为jQuery对象。 css-selector有一下几种形式：
<code>&quot;A&quot;</code>   A是类似与body，p等的标签名
<code>&quot;.A&quot;</code>  A是class名称
<code>&quot;#A&quot;</code>  A是id名称
<code>&quot;[A]&quot;</code> A是属性名称
<code>&quot;:A&quot;</code>  A是伪类选择器</p>
<p>这几种形式是可以组合使用的。比如<code>$(&quot;ul.menu li.menuItem&quot;)</code>可以选择所有class为menu的ul元素下class为menuItem的li元素。<code>$(&quot;select[name=&#39;staff&#39;][multiple]&quot;)</code>可以选择name为staff，且有属性multiple的select元素。`$(&quot;div#content p:first&quot;)可以选择id为content的div下的第一个p元素</p>
]]></content>
    
    
      <category term="jQuery" scheme="http://bloodingknight.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo搭建个人博客]]></title>
    <link href="http://bloodingknight.github.io/2013/10/21/hexo-your-blog/"/>
    <id>http://bloodingknight.github.io/2013/10/21/hexo-your-blog/</id>
    <published>2013-10-21T04:34:47.000Z</published>
    <updated>2013-10-22T01:47:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-node-js">安装node.js</h3>
<p>在linux下，不要直接使用apt-get安装，ubuntu源中的版本过低，0.6,会导致安装hexo失败。从hexo官网下载源代码，安装的方法和安装其他程序一样。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>./configure
<span class="built_in">make</span>
<span class="built_in">make</span> install
</pre></td></tr></table></figure>

<p>另外可以使用<code>make test</code> 和<code>make doc</code>来生成测试和文档。</p>
<h3 id="-hexo">安装hexo</h3>
<p>nodejs使用npm来管理nodejs的包。输入如下指令可以安装hexo（需要管理员权限）。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm <span class="keyword">install</span> -g hexo
</pre></td></tr></table></figure>

<h3 id="-">配置</h3>
<p>进入自己的博客目录，运行命令<code>hexo init</code>就可以将这个目录转换为自己的博客目录。hexo会自动生成几个文件夹和文件，其中<code>config.yml</code>是配置文件，在这个文件中，可以配置博客的一些常规选项，以及发布选项。</p>
<h3 id="-">使用</h3>
<p><code>hexo new &quot;your_blog_title&quot;</code> 命令用于生成一个新的博客post，然后在source/_posts目录下可以找到post文件，命名方式是“YYYY-mm-dd-your_blog_title”。
<code>hexo server</code>命令用于启动hexo服务器，默认配置下，<code>localhost:4000</code>可以打开自己的博客。
<code>hexo deploy</code>命令可以将hexo的博客发布到远程服务器上，hexo支持github，heroku和rsync发布。
<code>hexo generate</code>可以将自己的post文件转换为一个完整的网站代码。网站放在public目录下。</p>
<h3 id="-bae">部署到BAE</h3>
<p>hexo的博客可以通过配置部署到github上，但是github网速明显不行，国内的BAE则提供无限流量……网速那是没话说。</p>
<p>首先注册成为百度开发者，然后创建一个应用，目前BAE支持，java，python，php以及node.js（需要申请）。hexo是静态网页，因此对技术没要求，但是最好不要选择java环境。java环境下，是一个eclipse项目，你需要将自己的博客复制到webroot下……而且需要修改web.xml。</p>
<p>创建好应用之后，进入BAE控制台，创建一个新的版本，并将public目录下的文件打包，上传至BAE即可。
BAE支持git，但是由于，BAE支持自己创建版本，因此他的git目录下会有以版本号命名的文件夹，项目内容其实放在这些文件夹中……直接使用git提交会出错。需要自己先clone下来，然后在相应版本号中进行修改。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://bloodingknight.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown学习笔记]]></title>
    <link href="http://bloodingknight.github.io/2013/10/21/markdown-note/"/>
    <id>http://bloodingknight.github.io/2013/10/21/markdown-note/</id>
    <published>2013-10-21T03:00:39.000Z</published>
    <updated>2013-10-21T04:51:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="markdown">Markdown</h3>
<p>markdown 是一种新型的标记语言，可以很方便的书写，并且转变为html等格式。
markdown结合hexo的显示效果：</p>
<h4 id="-">引用</h4>
<blockquote>
<p>这是引用的文字</p>
<blockquote>
<p>引用中引用文字</p>
</blockquote>
</blockquote>
<h4 id="-">代码</h4>
<p>行间代码<code>class</code>
代码块</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// java代码</span>
<span class="comment">// hello, world</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> {</span>
	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
		System.out.println(<span class="string">"Hello, world!"</span>);
	}
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="markdown" scheme="http://bloodingknight.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://bloodingknight.github.io/2013/10/21/hello-world/"/>
    <id>http://bloodingknight.github.io/2013/10/21/hello-world/</id>
    <published>2013-10-21T02:48:08.000Z</published>
    <updated>2013-10-21T02:48:08.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
  </entry>
  
</feed>
